basePath: /
definitions:
  models.AuthResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.MovieCreateResponse:
    properties:
      created_at:
        type: string
      director:
        type: string
      genre:
        type: string
      plot:
        type: string
      rating:
        type: number
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  models.MovieRequest:
    properties:
      director:
        type: string
      genre:
        type: string
      plot:
        type: string
      rating:
        type: number
      title:
        type: string
      year:
        type: integer
    required:
    - director
    - title
    - year
    type: object
  models.MovieResponse:
    properties:
      created_at:
        type: string
      director:
        type: string
      genre:
        type: string
      id:
        type: integer
      plot:
        type: string
      rating:
        type: number
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      year:
        type: integer
    type: object
  models.Movies:
    properties:
      movies:
        items:
          $ref: '#/definitions/models.MovieResponse'
        type: array
    type: object
  models.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.UserRegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8060
info:
  contact: {}
  description: API for managing movies
  title: Movies API
  version: "1.0"
paths:
  /api/movies:
    get:
      consumes:
      - application/json
      description: Get all movies from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Movies'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Create a new movie with title, director, year, plot, genre, and
        rating
      parameters:
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.MovieRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MovieCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Movies
  /api/movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie by ID from the database
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: Get a movie by ID from the database
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Update a movie with title, director, year, plot, genre, and rating
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: string
      - description: Movie details
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/models.MovieRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MovieResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Movies
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with username and password
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, and email
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: The token for the user
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
